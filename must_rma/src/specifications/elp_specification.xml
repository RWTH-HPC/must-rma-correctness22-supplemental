<?xml version="1.0" encoding="UTF-8"?>

<!--
  Part of the MUST Project, under BSD-3-Clause License
 See https://hpc.rwth-aachen.de/must/LICENSE for license information.
  SPDX-License-Identifier: BSD-3-Clause
-->

<!DOCTYPE api-specification SYSTEM "@MUST_SPECIFICATION_DTD_PATH@/api-specification.dtd">
<api-specification unique-name="ELP">
	<api-headers>
        <header>p_elp_api.h</header>
        <header>mpi.h</header>
    </api-headers>
    <functions>		
@HAVE_OMPT_H_PREFIX@        <function name="OMPT_Event_thread_begin" return-type="void" callback="yes" omptevent="ompt_event_thread_begin">
            <function-arguments>
                <function-argument name="thread_type" type="ompt_thread_type_t " intent="in" order="0"></function-argument>
                <function-argument name="thread_id" type="ompt_thread_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_release_nest_lock_prev" return-type="void" callback="yes" omptevent="ompt_event_release_nest_lock_prev">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_taskgroup_end" return-type="void" callback="yes" omptevent="ompt_event_taskgroup_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_control" return-type="void" callback="yes" omptevent="ompt_event_control">
            <function-arguments>
                <function-argument name="command" type="uint64_t " intent="in" order="0"></function-argument>
                <function-argument name="modifier" type="uint64_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_release_nest_lock_last" return-type="void" callback="yes" omptevent="ompt_event_release_nest_lock_last">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_workshare_end" return-type="void" callback="yes" omptevent="ompt_event_workshare_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_sections_begin" return-type="void" callback="yes" omptevent="ompt_event_sections_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="parent_task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
                <function-argument name="workshare_function" type="void *" intent="in" order="2"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_barrier_begin" return-type="void" callback="yes" omptevent="ompt_event_wait_barrier_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyBarrierWaitBegin" group="MUST_ELPBasicChecks">
                  <analysis-arguments>
                    <analysis-argument type="mapped" analysis-arg-order="0">
                        <call-arg-name>parallel_id</call-arg-name>
                    </analysis-argument>
                    <analysis-argument type="mapped" analysis-arg-order="1">
                        <call-arg-name>task_id</call-arg-name>
                    </analysis-argument>
                  </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_sections_end" return-type="void" callback="yes" omptevent="ompt_event_sections_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_idle_end" return-type="void" callback="yes" omptevent="ompt_event_idle_end">
            <function-arguments>
                <function-argument name="thread_id" type="ompt_thread_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_acquired_ordered" return-type="void" callback="yes" omptevent="ompt_event_acquired_ordered">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_release_lock" return-type="void" callback="yes" omptevent="ompt_event_release_lock">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_taskgroup_end" return-type="void" callback="yes" omptevent="ompt_event_wait_taskgroup_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_critical" return-type="void" callback="yes" omptevent="ompt_event_wait_critical">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_initial_task_begin" return-type="void" callback="yes" omptevent="ompt_event_initial_task_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_acquired_atomic" return-type="void" callback="yes" omptevent="ompt_event_acquired_atomic">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_task_switch" return-type="void" callback="yes" omptevent="ompt_event_task_switch">
            <function-arguments>
                <function-argument name="suspended_task_id" type="ompt_task_id_t " intent="in" order="0"></function-argument>
                <function-argument name="resumed_task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_parallel_end" return-type="void" callback="yes" omptevent="ompt_event_parallel_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyParallelEnd" group="MUST_ELPBasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="mapped" analysis-arg-order="0">
                            <call-arg-name>parallel_id</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>task_id</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_loop_begin" return-type="void" callback="yes" omptevent="ompt_event_loop_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="parent_task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
                <function-argument name="workshare_function" type="void *" intent="in" order="2"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_initial_task_end" return-type="void" callback="yes" omptevent="ompt_event_initial_task_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_master_end" return-type="void" callback="yes" omptevent="ompt_event_master_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_parallel_begin" return-type="void" callback="yes" omptevent="ompt_event_parallel_begin">
            <function-arguments>
                <function-argument name="parent_task_id" type="ompt_task_id_t " intent="in" order="0"></function-argument>
                <function-argument name="parent_task_frame" type="ompt_frame_t *" intent="in" order="1"></function-argument>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="2"></function-argument>
                <function-argument name="requested_team_size" type="uint32_t " intent="in" order="3"></function-argument>
                <function-argument name="parallel_function" type="void *" intent="in" order="4"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyParallelBegin" group="MUST_ELPBasicChecks">
                  <analysis-arguments>
                    <analysis-argument type="mapped" analysis-arg-order="0">
                        <call-arg-name>parent_task_id</call-arg-name>
                    </analysis-argument>
                    <analysis-argument type="mapped" analysis-arg-order="1">
                        <call-arg-name>parent_task_frame</call-arg-name>
                    </analysis-argument>
                    <analysis-argument type="mapped" analysis-arg-order="2">
                        <call-arg-name>parallel_id</call-arg-name>
                    </analysis-argument>
                    <analysis-argument type="mapped" analysis-arg-order="3">
                        <call-arg-name>requested_team_size</call-arg-name>
                    </analysis-argument>
                    <analysis-argument type="mapped" analysis-arg-order="4">
                        <call-arg-name>parallel_function</call-arg-name>
                    </analysis-argument>
                  </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_nest_lock" return-type="void" callback="yes" omptevent="ompt_event_wait_nest_lock">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_single_in_block_end" return-type="void" callback="yes" omptevent="ompt_event_single_in_block_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_task_begin" return-type="void" callback="yes" omptevent="ompt_event_task_begin">
            <function-arguments>
                <function-argument name="parent_task_id" type="ompt_task_id_t " intent="in" order="0"></function-argument>
                <function-argument name="parent_task_frame" type="ompt_frame_t *" intent="in" order="1"></function-argument>
                <function-argument name="new_task_id" type="ompt_task_id_t  " intent="in" order="2"></function-argument>
                <function-argument name="task_function" type="void *" intent="in" order="3"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_release_atomic" return-type="void" callback="yes" omptevent="ompt_event_release_atomic">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_runtime_shutdown" return-type="void" callback="yes" omptevent="ompt_event_runtime_shutdown">
            <function-arguments>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_acquired_nest_lock_first" return-type="void" callback="yes" omptevent="ompt_event_acquired_nest_lock_first">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_taskwait_end" return-type="void" callback="yes" omptevent="ompt_event_wait_taskwait_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_barrier_end" return-type="void" callback="yes" omptevent="ompt_event_barrier_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyBarrierEnd" group="MUST_ELPBasicChecks">
                  <analysis-arguments>
                    <analysis-argument type="mapped" analysis-arg-order="0">
                        <call-arg-name>parallel_id</call-arg-name>
                    </analysis-argument>
                    <analysis-argument type="mapped" analysis-arg-order="1">
                        <call-arg-name>task_id</call-arg-name>
                    </analysis-argument>
                  </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_destroy_lock" return-type="void" callback="yes" omptevent="ompt_event_destroy_lock">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_release_critical" return-type="void" callback="yes" omptevent="ompt_event_release_critical">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_master_begin" return-type="void" callback="yes" omptevent="ompt_event_master_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_taskgroup_begin" return-type="void" callback="yes" omptevent="ompt_event_taskgroup_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_implicit_task_begin" return-type="void" callback="yes" omptevent="ompt_event_implicit_task_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_barrier_begin" return-type="void" callback="yes" omptevent="ompt_event_barrier_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyBarrierBegin" group="MUST_ELPBasicChecks">
                  <analysis-arguments>
                    <analysis-argument type="mapped" analysis-arg-order="0">
                        <call-arg-name>parallel_id</call-arg-name>
                    </analysis-argument>
                    <analysis-argument type="mapped" analysis-arg-order="1">
                        <call-arg-name>task_id</call-arg-name>
                    </analysis-argument>
                  </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_idle_begin" return-type="void" callback="yes" omptevent="ompt_event_idle_begin">
            <function-arguments>
                <function-argument name="thread_id" type="ompt_thread_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_init_lock" return-type="void" callback="yes" omptevent="ompt_event_init_lock">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyInitLock" group="MUST_ELPBasicChecks">
                  <analysis-arguments>
                    <analysis-argument type="mapped" analysis-arg-order="0">
                        <call-arg-name>wait_id</call-arg-name>
                    </analysis-argument>
                  </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_acquired_critical" return-type="void" callback="yes" omptevent="ompt_event_acquired_critical">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_release_ordered" return-type="void" callback="yes" omptevent="ompt_event_release_ordered">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_acquired_nest_lock_next" return-type="void" callback="yes" omptevent="ompt_event_acquired_nest_lock_next">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_workshare_begin" return-type="void" callback="yes" omptevent="ompt_event_workshare_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="parent_task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
                <function-argument name="workshare_function" type="void *" intent="in" order="2"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_acquired_lock" return-type="void" callback="yes" omptevent="ompt_event_acquired_lock">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyAcquiredLock" group="MUST_ELPBasicChecks">
                  <analysis-arguments>
                    <analysis-argument type="mapped" analysis-arg-order="0">
                        <call-arg-name>wait_id</call-arg-name>
                    </analysis-argument>
                  </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_atomic" return-type="void" callback="yes" omptevent="ompt_event_wait_atomic">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_taskwait_end" return-type="void" callback="yes" omptevent="ompt_event_taskwait_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_taskgroup_begin" return-type="void" callback="yes" omptevent="ompt_event_wait_taskgroup_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_barrier_end" return-type="void" callback="yes" omptevent="ompt_event_wait_barrier_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyBarrierWaitEnd" group="MUST_ELPBasicChecks">
                  <analysis-arguments>
                    <analysis-argument type="mapped" analysis-arg-order="0">
                        <call-arg-name>parallel_id</call-arg-name>
                    </analysis-argument>
                    <analysis-argument type="mapped" analysis-arg-order="1">
                        <call-arg-name>task_id</call-arg-name>
                    </analysis-argument>
                  </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_destroy_nest_lock" return-type="void" callback="yes" omptevent="ompt_event_destroy_nest_lock">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_single_in_block_begin" return-type="void" callback="yes" omptevent="ompt_event_single_in_block_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="parent_task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
                <function-argument name="workshare_function" type="void *" intent="in" order="2"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_loop_end" return-type="void" callback="yes" omptevent="ompt_event_loop_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_implicit_task_end" return-type="void" callback="yes" omptevent="ompt_event_implicit_task_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_lock" return-type="void" callback="yes" omptevent="ompt_event_wait_lock">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_thread_end" return-type="void" callback="yes" omptevent="ompt_event_thread_end">
            <function-arguments>
                <function-argument name="thread_type" type="ompt_thread_type_t " intent="in" order="0"></function-argument>
                <function-argument name="thread_id" type="ompt_thread_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_single_others_begin" return-type="void" callback="yes" omptevent="ompt_event_single_others_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_task_end" return-type="void" callback="yes" omptevent="ompt_event_task_end">
            <function-arguments>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_init_nest_lock" return-type="void" callback="yes" omptevent="ompt_event_init_nest_lock">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:notifyInitNestLock" group="MUST_ELPBasicChecks">
                  <analysis-arguments>
                    <analysis-argument type="mapped" analysis-arg-order="0">
                        <call-arg-name>wait_id</call-arg-name>
                    </analysis-argument>
                  </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_single_others_end" return-type="void" callback="yes" omptevent="ompt_event_single_others_end">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_ordered" return-type="void" callback="yes" omptevent="ompt_event_wait_ordered">
            <function-arguments>
                <function-argument name="wait_id" type="ompt_wait_id_t " intent="in" order="0"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_taskwait_begin" return-type="void" callback="yes" omptevent="ompt_event_taskwait_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_wait_taskwait_begin" return-type="void" callback="yes" omptevent="ompt_event_wait_taskwait_begin">
            <function-arguments>
                <function-argument name="parallel_id" type="ompt_parallel_id_t " intent="in" order="0"></function-argument>
                <function-argument name="task_id" type="ompt_task_id_t " intent="in" order="1"></function-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>
        <function name="OMPT_Event_flush" return-type="void" callback="yes" omptevent="ompt_event_flush">
            <function-arguments>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>  
            <operations> 
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments> 
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments></operation-arguments>
                </operation>
            </operations> 
        </function>@HAVE_OMPT_H_POSTFIX@
    </functions>
</api-specification>
