# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.

import os
import lit.formats
from lit.TestingConfig import TestingConfig

config: TestingConfig

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()


# name: The name of this test suite.
config.name = 'MUST'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp', '.f', '.sh']

config.excludes = [
    "CollMatchStressTests",
    "ELP",
    "EuroMpi2011",
    "Templates",
    "Tutorials",
]
if config.disable_umpire_tests:
    config.excludes.append("umpireTests")
if config.disable_marmot_tests:
    config.excludes.append("MarmotTests")

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root object directory where output is placed
config.test_exec_root = config.builddir + "/tests"

# test format
config.test_format = lit.formats.ShTest()

# to run with icc INTEL_LICENSE_FILE must be set
if 'INTEL_LICENSE_FILE' in os.environ:
    config.environment['INTEL_LICENSE_FILE'] = os.environ['INTEL_LICENSE_FILE']
if 'OMP_NUM_THREADS' in os.environ:
    config.environment['OMP_NUM_THREADS'] = os.environ['OMP_NUM_THREADS']

# the mpiexec-wrapper on claix-18 needs the HOSTNAME environment variable
if 'HOSTNAME' in os.environ:
    config.environment['HOSTNAME'] = os.environ['HOSTNAME']

if 'FI_PROVIDER_PATH' in os.environ:
    config.environment['FI_PROVIDER_PATH'] = os.environ['FI_PROVIDER_PATH']

config.environment['UCX_TLS'] = 'ud,sm,self'

# pass all currently set environment variables that contain the word "MPI"
config.environment.update({k: v for k, v in os.environ.items() if "MPI" in k})

if config.gti_is_thread_safe and config.openmp_found:
    config.available_features.add("hybrid")
if "hybrid" in config.available_features and config.enable_tsan:
    config.available_features.add("tsan")
if config.have_mpi_type_create_resized:
    config.available_features.add("HAVE_MPI_TYPE_CREATE_RESIZED")
if config.have_mpi_alltoallw:
    config.available_features.add("HAVE_MPI_ALLTOALLW")
if config.have_mpi_exscan:
    config.available_features.add("HAVE_MPI_EXSCAN")
if config.have_mpi_reduce_scatter_block:
    config.available_features.add("HAVE_MPI_REDUCE_SCATTER_BLOCK")
if config.have_mpi_reduce_scatter:
    config.available_features.add("HAVE_MPI_REDUCE_SCATTER")
if config.have_mpi_wchar:
    config.available_features.add("HAVE_MPI_WCHAR")
if config.have_mpi_signed_char:
    config.available_features.add("HAVE_MPI_SIGNED_CHAR")
if config.have_mpi_type_create_indexed_block:
    config.available_features.add("HAVE_MPI_TYPE_CREATE_INDEXED_BLOCK")
if config.mpi_has_assertions:
    config.available_features.add("mpi_has_assertions")
if config.have_typeart:
    config.available_features.add("typeart")
    config.substitutions.append(("%typeart-mpicc", config.typeart_mpicc))
if config.stacktrace:
    config.available_features.add("stacktrace")

if "MUST_FAST_TESTS_ONLY" in os.environ or config.fast_tests_only:
    print("lit.cfg: Selecting only tests that support the fast-tests feature.")
    config.available_features.add("fast-tests")

config.substitutions.append(("%mustrun-hybrid", "%must-run --must:hybrid"))
config.substitutions.append(("%mustrun-tsan", "%must-run --must:tsan"))

config.substitutions.append(
    ("%must-run-ddl", "%must-run --must:distributed --must:dl --must:fanin 2")
)
config.substitutions.append(
    ("%must-run",
     "bash %mustrun-cmd --must:timeout %mustrun-timeout --must:output stdout "
     "--must:mpiexec %mpiexec --must:np %mpiexec-numproc-flag --must:temp %t/must_temp "
     "%must-clean"))

if config.disable_must_clean:
    clean_opt = ""
else:
    clean_opt = "--must:clean"
config.substitutions.append(("%must-clean", clean_opt))
config.substitutions.append(("%mustrun-cmd", config.test_mustrun))
config.substitutions.append(("%mustrun-timeout", 20))
config.substitutions.append(("%mpiexec-numproc-flag",
                             config.mpiexec_numproc_flag))
config.substitutions.append(("%mpiexec", config.mpiexec))

# Use tee to tap and save the MUST output passed to FileCheck. The file is
# written to the cmake build directory. It is placed in the directory
# corresponding to the source file as `<testsource_basename>.filecheck.in`.
filecheck_wiretap = "tee %basename_t.filecheck.in | "
filecheck_cmd = (filecheck_wiretap
                 + config.test_filecheck
                 + " --dump-input always")
config.substitutions.append(
    ("%filecheck-may-segfault", filecheck_cmd)
)
config.substitutions.append(
    ("%filecheck",
     filecheck_cmd + " --implicit-check-not 'Caught signal 11' --implicit-check-not 'caught signal nr 11'")
)

if config.stacktrace:
    check_prefix_opt = "--check-prefixes CHECK,CHECK-ST"
else:
    check_prefix_opt = ""
config.substitutions.append(
    ("%check-prefixes", check_prefix_opt)
)

config.substitutions.append(("%must-bin-dir", config.must_bin_dir))
config.substitutions.append(("%builddir", config.builddir))
config.substitutions.append(("%must-src", config.srcdir))
